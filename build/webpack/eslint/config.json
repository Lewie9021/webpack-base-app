{
    "env": {
        "browser": true
    },
    "globals": {
        
    },
    "rules": {
        // 0 - turn the rule off
        // 1 - turn the rule on as a warning (doesn't affect exit code)
        // 2 - turn the rule on as an error (exit code is 1 when triggered)

        // ----------------------------------- Possible Errors ---------------------------------- \\
        
        // Disallow trailing commas
        "comma-dangle": 2,

        // Disallow assignment in conditional expressions
        "no-cond-assign": 2,
        
        // Allow console statements.
        "no-console": 0,

        // Disallow use of constant expressions in conditions.
        "no-constant-condition": 2,

        // Disallow control characters in regular expressions.
        "no-control-regex": 2,

        // Discourage use of debugger.
        "no-debugger": 1,

        // Disallow duplicate arguments in functions.
        "no-dupe-args": 2,

        // Disallow duplicate keys when creating object literals.
        "no-dupe-keys": 2,

        // Disallow a duplicate case label.
        "no-duplicate-case": 2,

        // Disallow empty statements.
        "no-empty": 2,

        // Discourage use of empty character classes in regular expressions.
        "no-empty-class": 1,

        // Disallow assigning to the exception in a catch block.
        "no-ex-assign": 2,

        // Discourage double-negation boolean casts in a boolean context.
        "no-extra-boolean-cast": 1,

        // Allow unnecessary parentheses for readability.
        "no-extra-parens": 0,

        // Disallow unnecessary semicolons.
        "no-extra-semi": 2,

        // Disallow overwriting functions written as function declarations.
        "no-func-assign": 2,

        // Disallow function or variable declarations in nested blocks.
        "no-inner-declarations": 2,

        // Allow invalid regular expression strings in the RegExp constructor.
        // "no-invalid-regexp": ?,

        // Disallow irregular whitespace outside of strings and comments.
        "no-irregular-whitespace": 2,

        // Disallow negation of the left operand of an in expression.
        // "no-negated-in-lhs": ?
        
        // disallow the use of object properties of the global object (Math and JSON) as functions.
        "no-obj-calls": 2,

        // Discourage multiple spaces in a regular expression literal.
        "no-regex-spaces": 1,

        // Disallow reserved words being used as object literal keys.
        "no-reserved-keys": 2,

        // Disallow sparse arrays
        "no-sparse-arrays": 2,

        // Discourage unreachable statements after a return, throw, continue, or break statement.
        "no-unreachable": 1,

        // Disallow comparisons with the value NaN.
        "use-isnan": 2,

        // Ensure JSDoc comments are valid.
        // "valid-jsdoc": ?
        
        // Ensure that the results of typeof are compared against a valid string.
        "valid-typeof": 2,

        // ----------------------------------- Best Practices ----------------------------------- \\

        // Treat var statements as if they were block scoped.
        "block-scoped-var": 1,

        // Specify the maximum cyclomatic complexity allowed in a program. Note: value (5) not yet finalised. 
        "complexity": [1, 5],

        // Require return statements to either always or never specify values.
        // "consistent-return": ?

        // Specify curly brace conventions for all control statements
        "curly": 1,

        // Require default case in switch statements.
        "default-case": 1,

        // Encourages use of dot notation whenever possible.
        "dot-notation": [1, {"allowKeywords": false}],

        // Require the use of === and !==.
        // "eqeqeq": ?

        // Encourage for-in loops have an if statement.
        "guard-for-in": 1,

        // Disallow the use of alert, confirm, and prompt.
        "no-alert": 2,

        // Disallow use of arguments.caller or arguments.callee
        "no-caller": 2,

        // Disallow division operators explicitly at beginning of regular expression.
        // "no-div-regex": ?

        // Discourage else after a return in an if.
        "no-else-return": 1,

        // Disallow use of labels for anything other then loops and switches.
        // "no-empty-label": ?

        // Disallow comparisons to null without a type-checking operator.
        // "no-eq-null": ?

        // Disallow use of eval().
        "no-eval": 2,

        // Disallow adding to native types.
        "no-extend-native": 2,

        // Discourage unnecessary function binding.
        "no-extra-bind": 1,

        // Disallow fallthrough of case statements.
        "no-fallthrough": 2,

        // Discourage the use of leading or trailing decimal points in numeric literals.
        "no-floating-decimal": 1,

        // Disallow use of eval()-like methods.
        "no-implied-eval": 2,

        // Discourage usage of __iterator__ property.
        "no-iterator": 1,

        // Disallow use of labeled statements.
        // "no-labels": ?

        // Disallow unnecessary nested blocks.
        "no-lone-blocks": 2,

        // Disallow creation of functions within loops.
        "no-loop-func": 2,

        // Disallow use of multiple spaces.
        "no-multi-spaces": 2,

        // Discourage use of multiline strings.
        "no-multi-str": 1,

        // Disallow reassignments of native objects.
        "no-native-reassign": 2,

        // Discourage use of new operator when not part of the assignment or comparison.
        "no-new": 1,

        // Disallow use of new operator for Function object.
        "no-new-func": 2,

        // Disallow creating new instances of String, Number, and Boolean.
        "no-new-wrappers": 2,

        // Discourage use of octal literals.
        "no-octal": 1,

        // Disallow use of octal escape sequences in string literals.
        "no-octal-escape": 2,

        // Disallow reassignment of function parameters.
        "no-param-reassign": 1,

        // Disallow use of process.env.
        // "no-process-env": ?

        // Disallow usage of __proto__ property.
        "no-proto": 2,

        // Disallow declaring the same variable more then once.
        "no-redeclare": 2,

        // Discourage use of assignment in return statement.
        "no-return-assign": 1,

        // Disallow use of javascript: urls.
        "no-script-url": 2,

        // Disallow comparisons where both sides are exactly the same
        "no-self-compare": 2,

        // Discourage use of comma operator.
        "no-sequences": 1,

        // Restrict what can be thrown as an exception.
        "no-throw-literal": 2,

        // Disallow usage of expressions in statement position.
        "no-unused-expressions": 2,

        // Disallow use of void operator.
        // "no-void": ?
        
        // Allow usage of configurable warning terms in comments - e.g. TODO or FIXME.
        "no-warning-comments": 0,
        
        // Disallow use of the with statement
        "no-with": 0,

        // Require use of the second argument for parseInt().
        "radix": 2,

        // Requires to declare all vars on top of their containing scope.
        "vars-on-top": 1,

        // Require immediate function invocation to be wrapped in parentheses.
        "wrap-iife": [2, "inside"],

        // Require or disallow Yoda conditions.
        "yoda": [2, "never"],

        // Controls location of Use Strict Directives.
        "strict": 0,

        // -------------------------------------- Variables ------------------------------------- \\

        // Discourage the catch clause parameter name being the same as a variable in the outer scope.
        "no-catch-shadow": 1,

        // Disallow deletion of variables.
        "no-delete-var": 2,

        // Disallow labels that share a name with a variable.
        // "no-label-var": ?

        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,

        // Disallow shadowing of names such as arguments.
        "no-shadow-restricted-names": 2,

        // Disallow use of undeclared variables unless mentioned in a /*global */ block.
        "no-undef": 2,

        // Disallow use of undefined when initializing variables.
        "no-undef-init": 2,

        // Disallow use of undefined variable.
        "no-undefined": 2,

        // Discourage declaration of variables that are not used in the code.
        "no-unused-vars": 1,

        // Disallow use of variables before they are defined.
        "no-use-before-define": 2,

        // ---------------------------------- Stylistic Issues ---------------------------------- \\

        // This option sets a specific tab width for your code.
        "indent": [2, 4, {"indentSwitchCase": true}],

        // Enforce one true brace style.
        "brace-style": [2, "1tbs", { "allowSingleLine": true }],

        // Require camel case names.
        "camelcase": [2, {"properties": "always"}],

        // Enforce spacing before and after comma.
        "comma-spacing": [2, {"before": false, "after": true}],

        // Enforce one true comma style.
        "comma-style": [2, "last"],
        
        // Enforces consistent naming when capturing the current execution context.
        "consistent-this": [2, "self"],

        // Encourage a newline at the end of file, with no multiple empty lines.
        "eol-last": 1,

        // Encourage function expressions to have a name.
        "func-names": 1,

        // Use both function declarations and expressions.
        "func-style": 0,

        // Enforces spacing between keys and values in object literal properties.
        "key-spacing": [2, {"beforeColon": false, "afterColon": true}],

        // Specify the maximum depth callbacks can be nested.
        "max-nested-callbacks": [2, 3],

        // Require a capital letter for constructors.
        "new-cap": [2, {"newIsCap": true, "capIsNew": true}],

        // Disallow the omission of parentheses when invoking a constructor with no arguments.
        "new-parens": 2,

        // Discourage lack of empty newline after var statement.
        "newline-after-var": [1, "always"],

        // Disallow use of the Array constructor.
        "no-array-constructor": 2,

        // Allow use of the continue statement.
        "no-continue": 0,

        // Discourage comments inline after code.
        "no-inline-comments": 1,

        // Discourage an else block only containing an if statement.
        "no-lonely-if": 1,

        // Disallow mixed spaces and tabs for indentation.
        "no-mixed-spaces-and-tabs": 2,

        // Disallow multiple empty lines.
        "no-multiple-empty-lines": [2, {"max": 2}],

        // Disallow nested ternary expressions.
        "no-nested-ternary": 2,

        // Disallow use of the Object constructor.
        "no-new-object": 2,

        // Disallow space between function identifier and application.
        "no-spaced-func": 2,

        // Allow the use of ternary operators.
        "no-ternary": 0,

        // Disallow trailing whitespace at the end of lines.
        "no-trailing-spaces": 2,

        // Allow dangling underscores in identifiers.
        // "no-underscore-dangle": ?,

        // Disallow wrapping of non-IIFE statements in parens.
        // "no-wrap-func": ?,

        // Disallow one variable declaration per function.
        "one-var": [2, "never"],
        
        // Require assignment operator shorthand where possible or prohibit it entirely.
        "operator-assignment": [1, "always"],
        
        // Enforce padding within blocks.
        "padded-blocks": [2, "never"],

        // Require quotes around object literal property names.
        "quote-props": [2, "as-needed"],

        // Specify whether backticks, double or single quotes should be used.
        "quotes": [2, "double", "avoid-escape"],

        // Require or disallow use of semicolons instead of ASI.
        "semi": [2, "always"],

        // Enforce spacing before and after semicolons.
        "semi-spacing": [2, {"before": false, "after": true}],

        // Sort variables within the same declaration block.
        "sort-vars": 0,
        
        // Require a space after certain keywords.
        "space-after-keywords": [2, "always"],

        // Require or disallow space before blocks.
        "space-before-blocks": [2, "always"],

        // Require or disallow space before function opening parenthesis.
        "space-before-function-paren": [2, "never"],

        // Require or disallow spaces inside brackets.
        "space-in-brackets": [2, "never"],

        // Require or disallow spaces inside parentheses.
        "space-in-parens": [2, "never"],

        // Require spaces around operators.
        "space-infix-ops": 2,

        // Require a space after return, throw, and case.
        "space-return-throw-case": 2,

        // Require or disallow spaces before/after unary operators.
        "space-unary-ops": [2, {"words": true, "nonwords": true}],

        // Require or disallow a space immediately following the // in a line comment.
        "spaced-line-comment": [2, "always"],

        // Don't require regex literals to be wrapped in parentheses.
        "wrap-regex": 0
    }
}
